#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é —á–µ—Ä–µ–∑ TraderNet API

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    # DRY RUN (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)
    python3 execute_portfolio_recommendations.py --dry-run

    # LIVE TRADING (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤)
    python3 execute_portfolio_recommendations.py --execute --priority 2

–¢—Ä–µ–±—É–µ—Ç—Å—è:
    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
      export TRADERNET_API_KEY="your_api_key"
      export TRADERNET_API_SECRET="your_api_secret"
"""

import sys
import argparse
import json
from pathlib import Path
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from tradernet_integration import (
    TraderNetClient,
    PortfolioAnalyzer,
    TradingAutomation,
    load_credentials_from_env,
    print_portfolio_summary,
    save_trading_log
)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    parser = argparse.ArgumentParser(
        description="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é —á–µ—Ä–µ–∑ TraderNet API"
    )

    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    )

    parser.add_argument(
        "--execute",
        action="store_true",
        help="–†–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–û–°–¢–û–†–û–ñ–ù–û!)"
    )

    parser.add_argument(
        "--priority",
        type=int,
        default=1,
        choices=[1, 2, 3, 4, 5],
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (1=–≤—Å–µ, 5=—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)"
    )

    parser.add_argument(
        "--log",
        type=str,
        default="trading_log.json",
        help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"
    )

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º
    dry_run = not args.execute
    if args.dry_run:
        dry_run = True

    print("\n" + "="*80)
    print("TRADERNET PORTFOLIO AUTOMATION")
    print("="*80)
    print(f"–†–µ–∂–∏–º: {'DRY RUN' if dry_run else 'LIVE TRADING'}")
    print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {args.priority}")
    print("="*80 + "\n")

    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å credentials
        print("üîë –ó–∞–≥—Ä—É–∂–∞—é credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        api_key, api_secret = load_credentials_from_env()
        print("‚úì Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
        print("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ TraderNet API...")
        client = TraderNetClient(api_key, api_secret)
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å...")
        analyzer = PortfolioAnalyzer(client)
        df, stats = analyzer.analyze_current_portfolio()
        print("‚úì –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—é–º–µ
        print_portfolio_summary(df, stats)

        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        recommendations = analyzer.generate_recommendations(df)

        print(f"‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        print("="*80)
        print("–¢–û–†–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("="*80)

        for i, rec in enumerate(recommendations, 1):
            print(f"\n[{i}] {rec.action} {rec.quantity} {rec.ticker}")
            print(f"    –¶–µ–Ω–∞: ${rec.current_price:.2f}")
            print(f"    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority}")
            print(f"    –ü—Ä–∏—á–∏–Ω–∞: {rec.reason}")

            if rec.stop_loss:
                print(f"    Stop Loss: ${rec.stop_loss:.2f}")
            if rec.take_profit:
                print(f"    Take Profit: ${rec.take_profit:.2f}")

        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "="*80)
        automation = TradingAutomation(client, analyzer)
        results = automation.execute_recommendations(
            recommendations,
            dry_run=dry_run,
            max_priority=args.priority
        )

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥
        if automation.trade_log:
            save_trading_log(automation, args.log)

        # –ò—Ç–æ–≥–∏
        print("\n" + "="*80)
        print("–ò–¢–û–ì–ò")
        print("="*80)
        executed = sum(1 for r in results if r.get("executed"))
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}")
        print(f"–û—Ä–¥–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {executed}")

        if dry_run:
            print("\n‚ö†Ô∏è  –≠–¢–û –ë–´–õ DRY RUN - –†–ï–ê–õ–¨–ù–´–• –û–ü–ï–†–ê–¶–ò–ô –ù–ï –í–´–ü–û–õ–ù–ï–ù–û")
            print("\n–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("  python3 execute_portfolio_recommendations.py --execute --priority 2")
        else:
            print("\n‚úì –ñ–ò–í–ê–Ø –¢–û–†–ì–û–í–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ê")

        print("="*80 + "\n")

    except KeyError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print(f"  export TRADERNET_API_KEY='–≤–∞—à_api_key'")
        print(f"  export TRADERNET_API_SECRET='–≤–∞—à_api_secret'")
        sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
