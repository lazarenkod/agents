#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–∑ TraderNet API
–ë–ï–ó –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 get_portfolio.py
    python3 get_portfolio.py --json
    python3 get_portfolio.py --csv portfolio.csv
"""

import sys
import json
import csv
import argparse
from datetime import datetime
from pathlib import Path

from tradernet_integration import TraderNetClient, load_credentials_from_env


def print_portfolio_pretty(df, stats):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
    print("\n" + "="*100)
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–†–¢–§–ï–õ–ï")
    print("="*100)
    print(f"–î–∞—Ç–∞/–í—Ä–µ–º—è:     {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats['total_value']:,.2f}")
    print(f"–°–æ–≤–æ–∫—É–ø–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:,.2f} ({stats['total_profit_pct']:+.2f}%)")
    print(f"–ü–æ–∑–∏—Ü–∏–π:        {stats['positions_count']}")
    print("="*100 + "\n")

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
    print("–ü–û–ó–ò–¶–ò–ò:")
    print("-" * 100)
    print(f"{'–¢–∏–∫–µ—Ä':<12} {'–ö–æ–ª-–≤–æ':>10} {'–¶–µ–Ω–∞':>10} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':>15} {'–î–æ–ª—è':>8} {'–í—Ö–æ–¥':>10} {'–ü—Ä–∏–±—ã–ª—å':>12} {'%':>8}")
    print("-" * 100)

    for idx, row in df.iterrows():
        ticker = row['ticker']
        quantity = int(row['quantity'])
        current_price = row['current_price']
        current_value = row['current_value']
        allocation_pct = row['allocation_pct']
        entry_price = row['entry_price']
        profit = row['profit']
        profit_pct = row['profit_pct']

        # –¶–≤–µ—Ç–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ (–≤ –∫–æ–Ω—Å–æ–ª–∏)
        profit_sign = "+" if profit >= 0 else ""

        print(f"{ticker:<12} {quantity:>10.0f} ${current_price:>9.2f} ${current_value:>14,.0f} {allocation_pct:>7.1f}% ${entry_price:>9.2f} {profit_sign}${profit:>10,.0f} {profit_pct:>+7.2f}%")

    print("-" * 100 + "\n")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º/–≥—Ä—É–ø–ø–∞–º
    print("–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ê–ó–ú–ï–†–£ –ü–û–ó–ò–¶–ò–ô:")
    print("-" * 100)

    for idx, row in df.nlargest(10, 'current_value').iterrows():
        ticker = row['ticker']
        allocation_pct = row['allocation_pct']
        bar_length = int(allocation_pct / 2)  # –ö–∞–∂–¥—ã–π % = 0.5 —Å–∏–º–≤–æ–ª–∞
        bar = "‚ñà" * bar_length

        print(f"{ticker:<12} {allocation_pct:>6.2f}% {bar}")

    print("="*100 + "\n")


def print_portfolio_json(df, stats):
    """–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    output = {
        "timestamp": datetime.now().isoformat(),
        "summary": {
            "total_value": float(stats['total_value']),
            "total_profit": float(stats['total_profit']),
            "total_profit_pct": float(stats['total_profit_pct']),
            "positions_count": stats['positions_count']
        },
        "positions": []
    }

    for idx, row in df.iterrows():
        output["positions"].append({
            "ticker": row['ticker'],
            "quantity": int(row['quantity']),
            "entry_price": float(row['entry_price']),
            "current_price": float(row['current_price']),
            "entry_value": float(row['entry_value']),
            "current_value": float(row['current_value']),
            "allocation_pct": float(row['allocation_pct']),
            "profit": float(row['profit']),
            "profit_pct": float(row['profit_pct'])
        })

    print(json.dumps(output, indent=2, ensure_ascii=False))


def save_portfolio_csv(df, filepath):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ CSV —Ñ–∞–π–ª"""
    df.to_csv(filepath, index=False)
    print(f"‚úì –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filepath}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    parser = argparse.ArgumentParser(
        description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–∑ TraderNet API (–ë–ï–ó –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ)"
    )

    parser.add_argument(
        "--json",
        action="store_true",
        help="–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"
    )

    parser.add_argument(
        "--csv",
        type=str,
        help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV —Ñ–∞–π–ª"
    )

    args = parser.parse_args()

    print("\n" + "="*100)
    print("üîó TraderNet Portfolio Viewer (READ-ONLY)")
    print("="*100 + "\n")

    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å credentials
        print("üîë –ó–∞–≥—Ä—É–∂–∞—é credentials...")
        api_key, api_secret = load_credentials_from_env()
        print("‚úì Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n")

        # –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
        print("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ TraderNet API...")
        client = TraderNetClient(api_key, api_secret)
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n")

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å
        print("üìä –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å...")

        positions = client.get_positions()
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π\n")

        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç
        if not positions:
            print("‚ö†Ô∏è  –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        print("üíπ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏...")
        tickers = [p["ticker"] for p in positions]
        quotes = client.get_quotes_batch(tickers)
        print(f"‚úì –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n")

        # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å DataFrame —Å –∞–Ω–∞–ª–∏–∑–æ–º
        import pandas as pd
        data = []
        total_value = 0
        total_profit = 0

        for pos in positions:
            ticker = pos["ticker"]
            quote = quotes.get(ticker, {})

            quantity = pos.get("quantity", 0)
            current_price = quote.get("price", pos.get("current_price", 0)) if quote else pos.get("current_price", 0)
            entry_price = pos.get("entry_price", 0)
            current_value = quantity * current_price
            entry_value = quantity * entry_price
            profit = current_value - entry_value
            profit_pct = (profit / entry_value * 100) if entry_value > 0 else 0

            data.append({
                "ticker": ticker,
                "quantity": quantity,
                "entry_price": entry_price,
                "current_price": current_price,
                "entry_value": entry_value,
                "current_value": current_value,
                "profit": profit,
                "profit_pct": profit_pct
            })

            total_value += current_value
            total_profit += profit

        df = pd.DataFrame(data)
        df["allocation_pct"] = (df["current_value"] / total_value * 100) if total_value > 0 else 0
        df = df.sort_values("current_value", ascending=False)

        stats = {
            "total_value": total_value,
            "total_profit": total_profit,
            "total_profit_pct": (total_profit / (total_value - total_profit) * 100) if (total_value - total_profit) > 0 else 0,
            "positions_count": len(df),
            "avg_profit_pct": df["profit_pct"].mean() if len(df) > 0 else 0
        }

        # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if args.json:
            print_portfolio_json(df, stats)
        else:
            print_portfolio_pretty(df, stats)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.csv:
            save_portfolio_csv(df, args.csv)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("‚úì –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´ (–±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ)")
        print("="*100 + "\n")

    except KeyError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print(f"  export TRADERNET_API_KEY='–≤–∞—à_api_key'")
        print(f"  export TRADERNET_API_SECRET='–≤–∞—à_api_secret'")
        sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
